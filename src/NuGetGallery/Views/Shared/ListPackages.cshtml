@model PackageListViewModel
@{
    ViewBag.Title = String.IsNullOrWhiteSpace(Model.SearchTerm) ? "Packages" : "Packages matching " + Model.SearchTerm;
    ViewBag.SortText = String.IsNullOrWhiteSpace(Model.SearchTerm) ? "recent installs" : "relevance";
    ViewBag.Tab = "Packages";
    ViewBag.BlockSearchEngineIndexing = !String.IsNullOrWhiteSpace(Model.SearchTerm) || Model.PageIndex != 0;
}

@helper AddPackageFilterOption(string optionName, string optionValue, bool canBeNull = false)
{
    @AddRadioGroupOption("advanced-search-packagetype", optionName, optionValue, Model.PackageType, canBeNull);
}

@helper AddSortByOption(string optionName, string optionValue, bool canBeNull = false)
{
    @AddRadioGroupOption("advanced-search-sortby", optionName, optionValue, Model.SortBy, canBeNull);
}

@helper AddRadioGroupOption(string radioGroupName, string optionName, string optionValue, string optionCompareValue, bool canBeNull = false)
{
    var elemGuid = Guid.NewGuid();
    <div style="display: flex;">
        <input id="@elemGuid" type="radio" name="@radioGroupName" @(optionCompareValue == optionValue || (canBeNull && optionCompareValue == null) ? "checked=\"checked\"" : "") value="@optionValue">
        <label for="@elemGuid">@optionName</label>
    </div>
}

@functions{
    private const string DEFAULT_PACKAGETYPE = "";
    private static readonly Dictionary<string, string> UI_SUPPORTED_PACKAGETYPES = new Dictionary<string, string> (StringComparer.OrdinalIgnoreCase)
    {
        { DEFAULT_PACKAGETYPE, "All types" },
        { "dependency", "Dependency" },
        { "dotnettool", ".NET tool" },
        { "template" , "Template" },
    };
}

<script>
    function ApplyAdvancedSearch() {
        // string
        var packageType = document.querySelector('input[name="advanced-search-packagetype"]:checked').value;
        // string
        var sortBy = document.querySelector('input[name="advanced-search-sortby"]:checked').value;
        // bool
        var includePrerelease = document.getElementById('advanced-search-includeprerelease').checked;

        var searchTermStr = `?q=${'@(Model.SearchTerm)'}`
        var includePreReleaseStr = "&prerel=" + includePrerelease;
        var packageTypeStr = !packageType ? "" : `&packageType=${packageType}`;
        var sortByStr = !sortBy ? "" : `&sortBy=${sortBy}`;

        location.href = searchTermStr + includePreReleaseStr + packageTypeStr + sortByStr;
    }

    // Reset advanced search by redirecting to a URL without A-S params
    function ResetAdvancedSearch() {
        var searchTermStr = `?q=${'@(Model.SearchTerm)'}`
        location.href = searchTermStr;
    }
</script>

<section role="main" class="container main-container page-list-packages">
    <div class="row clearfix no-margin">
        <div class="col-md-10 no-padding">
            <h1 role="alert">
                @if (String.IsNullOrEmpty(Model.SearchTerm))
                {
                    if (Model.TotalCount == 1)
                    {
                        <text>There is 1 package</text>
                    }
                    else
                    {
                        <text>There are @Model.TotalCount.ToNuGetNumberString() packages</text>
                    }
                }
                else
                {
                    if (Model.TotalCount == 1)
                    {
                        <text>1 package </text>
                    }
                    else
                    {
                        <text>@Model.TotalCount.ToNuGetNumberString() packages </text>
                    }

                    <text>returned for @Html.BreakWord(Model.SearchTerm)</text>
                }
            </h1>
        </div>
        <div class="col-md-2 col-xs-3 col-sm-1 text-right no-padding">
            @ if(Model.IsAdvancedSearchFlightEnabled)
            {
                <button class="btn-command" data-toggle="collapse" data-target="#advancedSearchPanel" aria-expanded="false" aria-controls="advancedSearchPanel">
                    <i class="ms-Icon @(Model.ShouldDisplayAdvancedSearchPanel ? "ms-Icon--FilterSolid" : "ms-Icon--Filter") ms-fontColor-blue" aria-hidden="true"></i>
                    Filter
                </button>
            }
            else
            {
                <a class="prerel-filter" href="?q=@Model.SearchTerm@(Model.IncludePrerelease ? "&prerel=false" : "")">@(Model.IncludePrerelease ? "Hide" : "Show") prerelease</a>
            }
        </div>
    </div>
    @if (Model.IsAdvancedSearchFlightEnabled)
    {
        <div class="row clearfix collapse advanced-search-panel@(Model.ShouldDisplayAdvancedSearchPanel ? " in" : "")" id="advancedSearchPanel">
            @if(Model.PackageType != null && !UI_SUPPORTED_PACKAGETYPES.ContainsKey(Model.PackageType))
            {
                <div class="row warning-panel">
                    <div class="col-md-12 icon-text alert alert-warning">
                        <i class="ms-Icon ms-Icon--Info" aria-hidden="true"></i>
                        Filtering on unrecognized package type: @Html.ToJson(Model.PackageType)
                    </div>
                </div>
            }
            <div class="row">
                <div class="col-md-2">
                    <fieldset id="advanced-search-packagetype">
                        <legend>Package type</legend>
                        @foreach(var packageType in UI_SUPPORTED_PACKAGETYPES)
                        {
                            @AddPackageFilterOption(packageType.Value, packageType.Key, canBeNull: packageType.Key == DEFAULT_PACKAGETYPE)    
                        }
                    </fieldset>
                </div>
                <div class="col-md-2">
                    <fieldset id="advanced-search-sortby">
                        <legend>Sort by</legend>
                        @AddSortByOption("Relevance", GalleryConstants.SearchSortNames.Relevance, canBeNull: true)
                        @AddSortByOption("Downloads", GalleryConstants.SearchSortNames.TotalDownloadsDesc)
                        @AddSortByOption("Recently updated", GalleryConstants.SearchSortNames.CreatedDesc)
                    </fieldset>
                </div>
                <div class="col-md-2">
                    <fieldset>
                        <legend>Options</legend>
                        <div style="display: flex;">
                            <input id="advanced-search-includeprerelease" type="checkbox" @(Model.IncludePrerelease ? "checked=\"checked\"" : "")>
                            <label for="advanced-search-includeprerelease">Include prerelease</label>
                        </div>
                    </fieldset>
                </div>
            </div>
            <div class="row">
                <div class="col-xs-4 col-sm-3 col-md-2 col-lg-1">
                    <input class="btn btn-primary form-control" type="button" value="Apply" onclick="ApplyAdvancedSearch()">
                </div>
                <div class="col-xs-4 col-sm-3 col-md-2 col-lg-1">
                    <input class="btn btn-link form-control" type="button" value="Reset" onclick="ResetAdvancedSearch()">
                </div>
            </div>
        </div>
    }
    
    @if (!Model.Items.Any())
    {
        <div class="row">
            <div class="col-xs-12 clearfix">
                <div class="panel panel-default" aria-expanded="true" >
                    <div class="panel-body">
                        NuGet package search works the same on nuget.org, from the NuGet CLI, and within the NuGet Package Manager extension in Visual Studio. <br />
                        Check out our <strong><a href="https://docs.microsoft.com/nuget/consume-packages/finding-and-choosing-packages#search-syntax">Search Syntax</a></strong>.
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="list-packages" role="list">
        @{
            var itemIndex = Model.PageIndex * Model.PageSize;
            var eventName = Model.IsPreviewSearch ? "preview-search-selection" : "search-selection";
        }
        @foreach (var package in Model.Items)
        {
            @Html.Partial("_ListPackage", package, new ViewDataDictionary { { "itemIndex", itemIndex }, { "eventName", eventName } })
            itemIndex++;
        }
    </div>

    <div class="row">
        <div class="col-xs-12 clearfix">
            @ViewHelpers.PreviousNextPager(Model.Pager)
        </div>
    </div>
</section>

@section bottomScripts {
    <script type="text/javascript">
        // Used to track how long the user waited before clicking a search selection.
        var pageLoadTime = Date.now();

        // Used to track how many selections were made on this page. Multiple selections can happen if the user opens
        // a search selection in a new tab, instead of navigating away from this page.
        var sincePageLoadCount = 0;
        @{
            var searchId = Guid.NewGuid().ToString();
            var category = Model.IsPreviewSearch ? "preview-search-page" : "search-page";
            var action = Model.IncludePrerelease ? "search-prerel" : "search-stable";

            // Emit an event representing the search page and the page index. This make it easier for the search selection
            // event to be correlated in Google Analytics.
            <text>
            window.nuget.sendAnalyticsEvent('@category', '@action', @Html.Raw(Json.Encode(Model.SearchTerm)), @Model.PageIndex);
            window.nuget.sendMetric('BrowserSearchPage', @Model.PageIndex, {
                SearchId: '@searchId',
                SearchTerm: @Html.Raw(Json.Encode(Model.SearchTerm)),
                IncludePrerelease: '@Model.IncludePrerelease',
                PageIndex: @Model.PageIndex,
                TotalCount: @Model.TotalCount,
                IsPreviewSearch: '@Model.IsPreviewSearch',
                PackageType: @Html.ToJson(Model.PackageType),
                SortBy: @Html.ToJson(Model.SortBy)
            });
            </text>
        }

        $(function () {
            var emitClickEvent = function () {
                var $this = $(this);
                var data = $this.data();
                if ($this.attr('href') && data.track) {
                    window.nuget.sendMetric('BrowserSearchSelection', data.trackValue, {
                        SearchId: '@searchId',
                        SearchTerm: @Html.Raw(Json.Encode(Model.SearchTerm)),
                        IncludePrerelease: '@Model.IncludePrerelease',
                        PageIndex: @Model.PageIndex,
                        TotalCount: @Model.TotalCount,
                        ClickIndex: data.trackValue,
                        PackageId: data.packageId,
                        PackageVersion: data.packageVersion,
                        UseVersion: data.useVersion,
                        SincePageLoadMs: Date.now() - pageLoadTime,
                        SincePageLoadCount: sincePageLoadCount,
                        IsPreviewSearch: '@Model.IsPreviewSearch',
                        PackageType: @Html.ToJson(Model.PackageType),
                        SortBy: @Html.ToJson(Model.SortBy)
                    });

                    sincePageLoadCount++;
                }
            };
            $.each($('a[data-track]'), function () {
                $(this).on('mouseup', function (e) {
                    if (e.which === 2) { // Middle-mouse click
                        emitClickEvent.call(this, e);
                    }
                });
                $(this).on('click', function (e) {
                    emitClickEvent.call(this, e);
                });
            });
        });
    </script>
}
